x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  postgres_primary:
    <<: *postgres-common
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    ports:
      - 5432:5432
    volumes:
      - ./docker/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - pgdata-primary:/var/lib/postgresql/data

  postgres_replica:
    <<: *postgres-common
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    command: bash /00_init_replica.sh
    ports:
      - 5433:5432
    depends_on:
      - postgres_primary
    volumes:
      - ./docker/00_init_replica.sh:/00_init_replica.sh
      - pgdata-replica:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    restart: always

  tripla:
    build: .
    command: bash docker/00_init_app.sh
    ports:
      - 3000:3000
    environment:
      DB_PRIMARY_HOST: postgres_primary
      DB_PRIMARY_USER: user
      DB_PRIMARY_PASSWORD: password
      DB_PRIMARY_PORT: 5432
      DB_REPLICA_HOST: postgres_replica
      DB_REPLICA_USER: user
      DB_REPLICA_PASSWORD: password
      DB_REPLICA_PORT: 5432
      REDIS_URL: redis://redis
    volumes:
      - .:/app
      - vendor:/vendor
      - home:/root
    depends_on:
      - postgres_primary
      - postgres_replica

volumes:
  vendor:
  home:
  pgdata-primary:
  pgdata-replica:
